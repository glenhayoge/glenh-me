{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../config/md.tsx"],
  "sourcesContent": ["import { defineDocumentType, defineNestedType, makeSource } from 'contentlayer/source-files'\nimport readingTime from 'reading-time';\nimport mdxOptions from './config/md';\nimport GithubSlugger from 'github-slugger'\n\nconst Author = defineNestedType(() => ({\n  name: 'Author',\n  fields: {\n    name: { type: 'string', required: true },\n    image: { type: 'string', required: true },\n  },\n}));\n\nconst Article = defineDocumentType(() => ({\n  name: 'Article',\n  filePathPattern: `articles/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    publishedAt: { type: 'string', required: true },\n    description: { type: 'string', required: true },\n    seoDescription: { type: 'string', required: true },\n    category: { type: 'string', required: true },\n    tags: {\n      type: 'array',\n      of: {\n        type: 'object',\n        fields: {\n          tag: { type: 'string' }\n        }\n      }\n    },\n    author: {\n      type: 'nested',\n      of: Author,\n    },\n    image: { type: 'string', required: true },\n    toc: {\n      type: \"boolean\",\n      required: true,\n      default: true,\n    },\n  },\n  computedFields,\n}));\n\nconst Snippet = defineDocumentType(() => ({\n  name: 'Snippet',\n  filePathPattern: `snippets/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    updatedAt: { type: 'string', required: true },\n    description: { type: 'string', required: true },\n    category: { type: 'string', required: true },\n  },\n  computedFields,\n}));\n\nconst Books = defineDocumentType(() => ({\n  name: 'Book',\n  filePathPattern: `books/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    category: { type: 'string', required: true },\n    description: { type: 'string', required: true },\n    image: { type: 'string', required: true },\n    publishedAt: { type: 'string', required: true },\n    author: { type: 'string', required: true }\n  },\n  computedFields,\n}));\n\nconst computedFields = {\n    readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\n    wordCount: {\n      type: 'number',\n      resolve: (doc) => doc.body.raw.split(/\\s+/gu).length,\n    },\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, ''),\n    },\n    headings: {\n      type: \"json\",\n      resolve: async (doc) => {\n        const regXHeader = /\\n(?<flag>#{1,6})\\s+(?<data>.+)/g;\n        const slugger = new GithubSlugger()\n        const headings = Array.from(doc.body.raw.matchAll(regXHeader)).map(\n            ({ groups }) => {\n              const flag = groups?.flag;\n              const data = groups?.data;\n              return {\n                level: flag?.length == 1 ? \"one\"\n                : flag?.length == 2 ? \"two\"\n                : \"three\",\n                text: data,\n                slug: data ? slugger.slug(data) : undefined\n              };\n            }\n          );\n          return headings;\n      },\n    },\n  };\n\n  const contentLayerConfig = makeSource({\n    contentDirPath: 'data',\n    documentTypes: [Article,Books,Snippet],\n    mdx: mdxOptions,\n    \n    \n  });\n\n\nexport default contentLayerConfig;\n", "import rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeCodeTitles from 'rehype-code-titles';\nimport remarkExternalLinks from 'remark-external-links';\nimport rehypeImgSize from 'rehype-img-size';\nimport { Pluggable } from 'unified';\nimport remarkGfm from 'remark-gfm';\nimport rehypeSlug from 'rehype-slug';\nimport rehypePrism from 'rehype-prism-plus';\nimport { rehypeAccessibleEmojis } from 'rehype-accessible-emojis';\nimport rehypeHighlight from 'rehype-highlight'; // Add this import\n\nconst mdxOptions = {\n  remarkPlugins: [remarkExternalLinks, remarkGfm],\n  rehypePlugins: [\n    rehypeSlug,\n    rehypeCodeTitles,\n    rehypePrism,\n    rehypeAutolinkHeadings,\n    rehypeAccessibleEmojis,\n    [\n      rehypeAutolinkHeadings,\n      {\n        properties: {\n          className: ['anchor'],\n        },\n      },\n    ],\n    [\n      rehypeImgSize,\n      {\n        dir: 'public',\n      },\n    ],\n    rehypeHighlight, // Include rehype-highlight for syntax highlighting\n  ] as Pluggable[],\n  compilers: [],\n  format: 'mdx',\n};\n\nexport default mdxOptions;\n"],
  "mappings": "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",
  "names": []
}
