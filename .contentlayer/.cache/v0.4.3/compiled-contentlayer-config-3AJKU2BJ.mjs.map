{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["// import { defineDocumentType, defineNestedType, makeSource } from 'contentlayer/source-files'\nimport { defineDocumentType, defineNestedType, makeSource } from 'contentlayer2/source-files';\nimport readingTime from 'reading-time';\nimport GithubSlugger from 'github-slugger'\n// import rehypePrettyCode from 'rehype-pretty-code';\nimport rehypePrismPlus from 'rehype-prism-plus';\n\nconst Author = defineNestedType(() => ({\n  name: 'Author',\n  fields: {\n    name: { type: 'string', required: true },\n    image: { type: 'string', required: true },\n  },\n}));\n\nconst computedFields = {\n  slug: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath.replace(/^(articles|books|snippets)\\//, ''),\n  },\n  readingTime: { \n    type: 'json', \n    resolve: (doc) => readingTime(doc.body.raw) \n  },\n  headings: {\n    type: 'json',\n    resolve: (doc) => {\n      const slugger = new GithubSlugger();\n      const headings = [];\n      const lines = doc.body.raw.split('\\n');\n      \n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        if (line.startsWith('## ')) {\n          const text = line.replace('## ', '');\n          const slug = slugger.slug(text);\n          headings.push({ text, slug, level: 2 });\n        }\n        if (line.startsWith('### ')) {\n          const text = line.replace('### ', '');\n          const slug = slugger.slug(text);\n          headings.push({ text, slug, level: 3 });\n        }\n      }\n      return headings;\n    },\n  },\n};\n\nconst Article = defineDocumentType(() => ({\n  name: 'Article',\n  filePathPattern: `articles/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    publishedAt: { type: 'string', required: true },\n    description: { type: 'string', required: true },\n    seoDescription: { type: 'string', required: true },\n    category: { type: 'string', required: true },\n    tags: { type: 'string', required: true },\n    caption: { type: 'string', required: true },\n    author: {\n      type: 'nested',\n      of: Author,\n    },\n    image: { type: 'string', required: true },\n    toc: {\n      type: \"boolean\",\n      required: true,\n      default: true,\n    },\n  },\n  computedFields,\n}));\n\nconst Snippet = defineDocumentType(() => ({\n  name: 'Snippet',\n  filePathPattern: `snippets/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    updatedAt: { type: 'string', required: true },\n    description: { type: 'string', required: true },\n    category: { type: 'string', required: true },\n    tags: { type: 'string', required: true },\n  },\n  computedFields,\n}));\n\nconst Book = defineDocumentType(() => ({\n  name: 'Book',\n  filePathPattern: `books/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    category: { type: 'string', required: true },\n    description: { type: 'string', required: true },\n    image: { type: 'string', required: true },\n    publishedAt: { type: 'string', required: true },\n    author: { type: 'string', required: true }\n  },\n  computedFields,\n}));\n\nexport default makeSource({\n  contentDirPath: 'data',\n  documentTypes: [Article, Book, Snippet],\n  mdx: {\n    remarkPlugins: [],\n    rehypePlugins: [],\n    format: 'mdx',\n  },\n  exclude: [\"**/*.json\", \"siteMapdata.json\"],\n  disableImportAliasWarning: true,\n  fileExtensions: ['mdx', 'md'],\n  esm: false\n});\n"],
  "mappings": "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",
  "names": []
}
