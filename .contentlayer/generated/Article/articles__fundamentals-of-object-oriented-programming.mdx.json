{
  "title": "Fundamentals of Object Oriented Programming",
  "publishedAt": "Mar 21, 2024",
  "description": "Learn the fundamentals of object-oriented programming (OOP) from first principles. Understand key concepts like classes, objects, encapsulation, inheritance, and polymorphism in a simple and logical way to build a solid programming foundation.",
  "seoDescription": "Learn the fundamentals of object-oriented programming (OOP) from first principles. Understand key concepts like classes, objects, encapsulation, inheritance, and polymorphism in a simple and logical way to build a solid programming foundation.",
  "category": "Fundamentals of Computer Science Series",
  "tags": "computer-science,programming,object-oriented-programming",
  "caption": "Code on a laptop screen Credits: Luca Bravo, Unsplash",
  "author": {
    "name": "GlenH",
    "image": "/assets/glens_1.png",
    "type": "Author",
    "_raw": {}
  },
  "image": "https://images.unsplash.com/photo-1488590528505-98d2b5aba04b?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  "toc": true,
  "body": {
    "raw": "\n### What is Programming?\n\nAt its core, programming is about giving instructions to a computer to perform tasks. These tasks are broken down into smaller steps, and the instructions are written in a programming language that the computer can interpret.\n\n### What is a Program Made of?\n\nA program is made up of two key things:\n\n**Data**: Information (e.g., numbers, text, etc.) that the program manipulates.\n**Behavior**: Actions or operations that the program performs on the data.\n\nIn traditional programming, you define functions or procedures (blocks of code) to manipulate the data. This is called **procedural programming**.\n\n### The Problem with Procedural Programming\n\nAs programs grow larger and more complex, it becomes harder to manage the relationships between functions and data. It’s like having a recipe book with all the steps (functions) and ingredients (data) jumbled together. Changes in one function might affect another in unexpected ways. It becomes hard to maintain and update.\n\n### The Idea of Object-Oriented Programming (OOP)\n\nThe key principle behind OOP is: **Organize data and behavior together into objects**.\n\nObjects in the real world are things that have:\n\n- **Attributes (data)**: For example, a \"Car\" object might have attributes like color, speed, or model.\n- **Behaviors (actions)**: The \"Car\" object might also have behaviors like \"drive\" or \"stop\".\n\nBy structuring programs in terms of objects, you can create more modular, reusable, and easier-to-manage systems.\n\n### Breaking Down OOP Concepts\n\n**a. Objects**\n\nAn object is a bundle of related data and behavior. Think of an object as a self-contained entity that knows how to do certain things (behaviors) and holds certain information (data).\n\nFor example, in a simple game, you might have a \"Player\" object:\n\n- **Data**: The player’s health, score, position.\n- **Behavior**: Move, jump, attack.\n\n**b. Classes**\n\nA class is like a blueprint for creating objects. It defines what data and behaviors each object of that type should have.\n\nExample:\n\n- You can create a `Car` class that defines that all cars should have attributes like `color` and `speed`, and behaviors like `drive()`.\n- From this class, you can create multiple car objects with different specific values for their data, like a red car or a blue car.\n\n**c. Encapsulation**\n\nOne core principle of OOP is encapsulation, which means hiding the details of how something works and only exposing what's necessary. An object only reveals the behaviors (methods) you need to interact with it, without you needing to know how it's implemented internally.\n\nExample: \n\n- You can drive a car without needing to understand how the engine works. You just need to know how to use the steering wheel and pedals.\n\n**d. Abstraction**\n\nAbstraction involves simplifying complex systems by modeling real-world objects using only the details that matter. You represent objects in a way that’s easy to understand and work with.\n\nExample: \n\n- Instead of thinking about all the complex parts of a car, you abstract it into simple terms like color, speed, and drive behavior.\n\n**e. Inheritance**\n\nInheritance allows you to create a new class based on an existing class, inheriting its attributes and behaviors but also adding or modifying them.\n\nExample:\n\n- A `Car` class might define general properties like `color` and `speed`.\n- A `RaceCar` class can inherit from `Car`, adding extra properties like `turboBoost()` while still being able to use the behaviors of a normal car (like drive()).\n\n**f. Polymorphism**\n\nPolymorphism allows objects of different classes to be treated the same way if they share the same interface. It lets you use a single function or method on different types of objects, which behave differently based on their own implementations.\n\nExample: \n\n- You might have a `Vehicle` class with a `move()` method, and both `Car` and `Bike` inherit from `Vehicle`. When you call `move()` on either a car or bike object, each will execute its version of the move method.\n\n### Putting it All Together: Example\n\nLet’s use a real-world example: A shopping system.\n\n1. **Classes**: You define classes like `Product`, `ShoppingCart`, and `User`.\n\n2. **Objects**:\n\n- Each `Product` object has data like `price`, `name`, and `stock`.\n- The `ShoppingCart` object contains a list of `products` and `methods` to `add` or `remove` items.\n\n3. **Encapsulation**: The user of the shopping cart doesn’t need to know how the `addProduct` method works internally—they just call it to add a product to the cart.\n\n4. **Abstraction**: You abstract complex ideas into simpler ones. Instead of worrying about how payments work behind the scenes, you just call `checkout()` and let the system handle it.\n\n5. **Inheritance**: Maybe you have different types of `users` `(GuestUser, RegisteredUser)`. Both inherit from a base User class but may have different methods for placing orders.\n\n6. **Polymorphism**: If both `GuestUser` and `RegisteredUser` share a method `placeOrder()`, you can call `placeOrder()` on any user object without needing to know if it's a guest or registered user. The right behavior will execute based on the type of user.\n\n### Why OOP?\n\n- **Modularity**: Code is easier to organize into pieces.\n- **Reusability**: You can reuse code by creating new objects from existing classes.\n- **Maintainability**: It's easier to change or extend programs since objects are self-contained.\n- **Abstraction & Encapsulation**: You hide the complex details and only expose what’s necessary for interaction.\n\nObject-oriented programming is a way to model the real world in software by bundling data and related behavior into objects. It promotes modularity, reusability, and clarity. As you break down the problem into objects and relationships, programs become easier to manage, scale, and evolve over time.\n\n### References & Additional Resources\n\n1. [Head First Object-Oriented Analysis and Design](https://www.amazon.com/Head-First-Object-Oriented-Analysis-Design/dp/0596008678/)\n\n2. [Beginners Guide to Object Oriented Programming](https://medium.com/@Adekola_Olawale/beginners-guide-to-object-oriented-programming-a94601ea2fbd) \n\n3. [The Object-Oriented Thought Process](https://www.amazon.com/Object-Oriented-Thought-Process-Developers-Library/dp/0321861272/?tag=javamysqlanta-20) \n\n\n\n",
    "code": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var b=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),f=(r,e)=>{for(var i in e)a(r,i,{get:e[i],enumerable:!0})},c=(r,e,i,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!u.call(r,o)&&o!==i&&a(r,o,{get:()=>e[o],enumerable:!(t=p(e,o))||t.enumerable});return r};var w=(r,e,i)=>(i=r!=null?h(g(r)):{},c(e||!r||!r.__esModule?a(i,\"default\",{value:r,enumerable:!0}):i,r)),y=r=>c(a({},\"__esModule\",{value:!0}),r);var s=b((P,l)=>{l.exports=_jsx_runtime});var x={};f(x,{default:()=>v,frontmatter:()=>k});var n=w(s()),k={title:\"Fundamentals of Object Oriented Programming\",publishedAt:\"Mar 21, 2024\",description:\"Learn the fundamentals of object-oriented programming (OOP) from first principles. Understand key concepts like classes, objects, encapsulation, inheritance, and polymorphism in a simple and logical way to build a solid programming foundation.\",seoDescription:\"Learn the fundamentals of object-oriented programming (OOP) from first principles. Understand key concepts like classes, objects, encapsulation, inheritance, and polymorphism in a simple and logical way to build a solid programming foundation.\",category:\"Fundamentals of Computer Science Series\",tags:\"computer-science,programming,object-oriented-programming\",author:{name:\"GlenH\",image:\"/assets/glens_1.png\"},image:\"https://images.unsplash.com/photo-1488590528505-98d2b5aba04b?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",caption:\"Code on a laptop screen Credits: Luca Bravo, Unsplash\"};function d(r){let e=Object.assign({h3:\"h3\",a:\"a\",span:\"span\",p:\"p\",strong:\"strong\",ul:\"ul\",li:\"li\",code:\"code\",ol:\"ol\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.h3,{id:\"what-is-programming\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-is-programming\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What is Programming?\"]}),`\n`,(0,n.jsx)(e.p,{children:\"At its core, programming is about giving instructions to a computer to perform tasks. These tasks are broken down into smaller steps, and the instructions are written in a programming language that the computer can interpret.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-is-a-program-made-of\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-is-a-program-made-of\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What is a Program Made of?\"]}),`\n`,(0,n.jsx)(e.p,{children:\"A program is made up of two key things:\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Data\"}),`: Information (e.g., numbers, text, etc.) that the program manipulates.\n`,(0,n.jsx)(e.strong,{children:\"Behavior\"}),\": Actions or operations that the program performs on the data.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In traditional programming, you define functions or procedures (blocks of code) to manipulate the data. This is called \",(0,n.jsx)(e.strong,{children:\"procedural programming\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"the-problem-with-procedural-programming\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#the-problem-with-procedural-programming\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"The Problem with Procedural Programming\"]}),`\n`,(0,n.jsx)(e.p,{children:\"As programs grow larger and more complex, it becomes harder to manage the relationships between functions and data. It\\u2019s like having a recipe book with all the steps (functions) and ingredients (data) jumbled together. Changes in one function might affect another in unexpected ways. It becomes hard to maintain and update.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"the-idea-of-object-oriented-programming-oop\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#the-idea-of-object-oriented-programming-oop\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"The Idea of Object-Oriented Programming (OOP)\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The key principle behind OOP is: \",(0,n.jsx)(e.strong,{children:\"Organize data and behavior together into objects\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Objects in the real world are things that have:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Attributes (data)\"}),': For example, a \"Car\" object might have attributes like color, speed, or model.']}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Behaviors (actions)\"}),': The \"Car\" object might also have behaviors like \"drive\" or \"stop\".']}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"By structuring programs in terms of objects, you can create more modular, reusable, and easier-to-manage systems.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"breaking-down-oop-concepts\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#breaking-down-oop-concepts\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Breaking Down OOP Concepts\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"a. Objects\"})}),`\n`,(0,n.jsx)(e.p,{children:\"An object is a bundle of related data and behavior. Think of an object as a self-contained entity that knows how to do certain things (behaviors) and holds certain information (data).\"}),`\n`,(0,n.jsx)(e.p,{children:'For example, in a simple game, you might have a \"Player\" object:'}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Data\"}),\": The player\\u2019s health, score, position.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Behavior\"}),\": Move, jump, attack.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"b. Classes\"})}),`\n`,(0,n.jsx)(e.p,{children:\"A class is like a blueprint for creating objects. It defines what data and behaviors each object of that type should have.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"You can create a \",(0,n.jsx)(e.code,{children:\"Car\"}),\" class that defines that all cars should have attributes like \",(0,n.jsx)(e.code,{children:\"color\"}),\" and \",(0,n.jsx)(e.code,{children:\"speed\"}),\", and behaviors like \",(0,n.jsx)(e.code,{children:\"drive()\"}),\".\"]}),`\n`,(0,n.jsx)(e.li,{children:\"From this class, you can create multiple car objects with different specific values for their data, like a red car or a blue car.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"c. Encapsulation\"})}),`\n`,(0,n.jsx)(e.p,{children:\"One core principle of OOP is encapsulation, which means hiding the details of how something works and only exposing what's necessary. An object only reveals the behaviors (methods) you need to interact with it, without you needing to know how it's implemented internally.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"You can drive a car without needing to understand how the engine works. You just need to know how to use the steering wheel and pedals.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"d. Abstraction\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Abstraction involves simplifying complex systems by modeling real-world objects using only the details that matter. You represent objects in a way that\\u2019s easy to understand and work with.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Instead of thinking about all the complex parts of a car, you abstract it into simple terms like color, speed, and drive behavior.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"e. Inheritance\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Inheritance allows you to create a new class based on an existing class, inheriting its attributes and behaviors but also adding or modifying them.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"A \",(0,n.jsx)(e.code,{children:\"Car\"}),\" class might define general properties like \",(0,n.jsx)(e.code,{children:\"color\"}),\" and \",(0,n.jsx)(e.code,{children:\"speed\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"A \",(0,n.jsx)(e.code,{children:\"RaceCar\"}),\" class can inherit from \",(0,n.jsx)(e.code,{children:\"Car\"}),\", adding extra properties like \",(0,n.jsx)(e.code,{children:\"turboBoost()\"}),\" while still being able to use the behaviors of a normal car (like drive()).\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"f. Polymorphism\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Polymorphism allows objects of different classes to be treated the same way if they share the same interface. It lets you use a single function or method on different types of objects, which behave differently based on their own implementations.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"You might have a \",(0,n.jsx)(e.code,{children:\"Vehicle\"}),\" class with a \",(0,n.jsx)(e.code,{children:\"move()\"}),\" method, and both \",(0,n.jsx)(e.code,{children:\"Car\"}),\" and \",(0,n.jsx)(e.code,{children:\"Bike\"}),\" inherit from \",(0,n.jsx)(e.code,{children:\"Vehicle\"}),\". When you call \",(0,n.jsx)(e.code,{children:\"move()\"}),\" on either a car or bike object, each will execute its version of the move method.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{id:\"putting-it-all-together-example\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#putting-it-all-together-example\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Putting it All Together: Example\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Let\\u2019s use a real-world example: A shopping system.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Classes\"}),\": You define classes like \",(0,n.jsx)(e.code,{children:\"Product\"}),\", \",(0,n.jsx)(e.code,{children:\"ShoppingCart\"}),\", and \",(0,n.jsx)(e.code,{children:\"User\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Objects\"}),\":\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Each \",(0,n.jsx)(e.code,{children:\"Product\"}),\" object has data like \",(0,n.jsx)(e.code,{children:\"price\"}),\", \",(0,n.jsx)(e.code,{children:\"name\"}),\", and \",(0,n.jsx)(e.code,{children:\"stock\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"ShoppingCart\"}),\" object contains a list of \",(0,n.jsx)(e.code,{children:\"products\"}),\" and \",(0,n.jsx)(e.code,{children:\"methods\"}),\" to \",(0,n.jsx)(e.code,{children:\"add\"}),\" or \",(0,n.jsx)(e.code,{children:\"remove\"}),\" items.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.ol,{start:\"3\",children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Encapsulation\"}),\": The user of the shopping cart doesn\\u2019t need to know how the \",(0,n.jsx)(e.code,{children:\"addProduct\"}),\" method works internally\\u2014they just call it to add a product to the cart.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Abstraction\"}),\": You abstract complex ideas into simpler ones. Instead of worrying about how payments work behind the scenes, you just call \",(0,n.jsx)(e.code,{children:\"checkout()\"}),\" and let the system handle it.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Inheritance\"}),\": Maybe you have different types of \",(0,n.jsx)(e.code,{children:\"users\"}),\" \",(0,n.jsx)(e.code,{children:\"(GuestUser, RegisteredUser)\"}),\". Both inherit from a base User class but may have different methods for placing orders.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Polymorphism\"}),\": If both \",(0,n.jsx)(e.code,{children:\"GuestUser\"}),\" and \",(0,n.jsx)(e.code,{children:\"RegisteredUser\"}),\" share a method \",(0,n.jsx)(e.code,{children:\"placeOrder()\"}),\", you can call \",(0,n.jsx)(e.code,{children:\"placeOrder()\"}),\" on any user object without needing to know if it's a guest or registered user. The right behavior will execute based on the type of user.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{id:\"why-oop\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#why-oop\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Why OOP?\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Modularity\"}),\": Code is easier to organize into pieces.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Reusability\"}),\": You can reuse code by creating new objects from existing classes.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Maintainability\"}),\": It's easier to change or extend programs since objects are self-contained.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Abstraction & Encapsulation\"}),\": You hide the complex details and only expose what\\u2019s necessary for interaction.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Object-oriented programming is a way to model the real world in software by bundling data and related behavior into objects. It promotes modularity, reusability, and clarity. As you break down the problem into objects and relationships, programs become easier to manage, scale, and evolve over time.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"references--additional-resources\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#references--additional-resources\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"References & Additional Resources\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://www.amazon.com/Head-First-Object-Oriented-Analysis-Design/dp/0596008678/\",target:\"_blank\",rel:\"nofollow noopener noreferrer\",children:\"Head First Object-Oriented Analysis and Design\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://medium.com/@Adekola_Olawale/beginners-guide-to-object-oriented-programming-a94601ea2fbd\",target:\"_blank\",rel:\"nofollow noopener noreferrer\",children:\"Beginners Guide to Object Oriented Programming\"}),\"\\xA0\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://www.amazon.com/Object-Oriented-Thought-Process-Developers-Library/dp/0321861272/?tag=javamysqlanta-20\",target:\"_blank\",rel:\"nofollow noopener noreferrer\",children:\"The Object-Oriented Thought Process\"}),\"\\xA0\"]}),`\n`]}),`\n`]})]})}function j(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(d,r)})):d(r)}var v=j;return y(x);})();\n;return Component;"
  },
  "_id": "articles/fundamentals-of-object-oriented-programming.mdx",
  "_raw": {
    "sourceFilePath": "articles/fundamentals-of-object-oriented-programming.mdx",
    "sourceFileName": "fundamentals-of-object-oriented-programming.mdx",
    "sourceFileDir": "articles",
    "contentType": "mdx",
    "flattenedPath": "articles/fundamentals-of-object-oriented-programming"
  },
  "type": "Article",
  "readingTime": {
    "text": "5 min read",
    "minutes": 4.705,
    "time": 282300,
    "words": 941
  },
  "wordCount": 943,
  "slug": "fundamentals-of-object-oriented-programming",
  "headings": [
    {
      "level": "three",
      "text": "What is Programming?",
      "slug": "what-is-programming"
    },
    {
      "level": "three",
      "text": "What is a Program Made of?",
      "slug": "what-is-a-program-made-of"
    },
    {
      "level": "three",
      "text": "The Problem with Procedural Programming",
      "slug": "the-problem-with-procedural-programming"
    },
    {
      "level": "three",
      "text": "The Idea of Object-Oriented Programming (OOP)",
      "slug": "the-idea-of-object-oriented-programming-oop"
    },
    {
      "level": "three",
      "text": "Breaking Down OOP Concepts",
      "slug": "breaking-down-oop-concepts"
    },
    {
      "level": "three",
      "text": "Putting it All Together: Example",
      "slug": "putting-it-all-together-example"
    },
    {
      "level": "three",
      "text": "Why OOP?",
      "slug": "why-oop"
    },
    {
      "level": "three",
      "text": "References & Additional Resources",
      "slug": "references--additional-resources"
    }
  ]
}