{
  "title": "Viewing Database and Schema in Django SQLite3 Database",
  "publishedAt": "Feb 7, 2024",
  "description": "In Django, `db.sqlite3` is the default SQLite database file that is created when you initiate a new Django project. SQLite is a lightweight, serverless, self-contained, and transactional SQL database engine.",
  "seoDescription": "In Django, `db.sqlite3` is the default SQLite database file that is created when you initiate a new Django project. SQLite is a lightweight, serverless, self-contained, and transactional SQL database engine.",
  "category": "coding",
  "tags": "database",
  "caption": "A group of blue boxes, PC: Growtika via Unsplash",
  "author": {
    "name": "GlenH",
    "image": "/assets/glens_1.png",
    "type": "Author",
    "_raw": {}
  },
  "image": "https://images.unsplash.com/photo-1667372459510-55b5e2087cd0?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxfDB8MXxyYW5kb218MHx8fHx8fHx8MTY5ODI3NzAwNg&ixlib=rb-4.0.3&q=80&utm_campaign=api-credit&utm_medium=referral&utm_source=unsplash_source&w=1080",
  "toc": true,
  "body": {
    "raw": "\nIn Django, `db.sqlite3` is the default SQLite database file that is created when you initiate a new Django project. SQLite is a lightweight, serverless, self-contained, and transactional SQL database engine.\n\nWhen you start a new Django project, by default, it comes configured to use SQLite as its database backend. SQLite is suitable for development and small-scale applications, as it's lightweight and doesn't require a separate database server process.\n\nA default default `db.sqlite3` databse configuration would look something like this in your Django `settings.py` file.\n\n```\nDATABASES = {\n\n'default': {\n\n'ENGINE': 'django.db.backends.sqlite3',\n\n'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n\n}\n\n}\n```\n\n`db.sqlite3` is an integral part of Django projects, particularly during development, and it represents the SQLite database that your Django project uses by default.\n\n#### Reasons to view database schemas\n\nViewing the schema that Django created in the `db.sqlite3` database can be beneficial especially when you want to understand the database structure, debug and troubleshoot, check migration status, manipulate database manually, integrate with external tools and document  your database.\n\n#### Common steps to access and view the database schema\n\nThe common approaches  to access and view the database schema are via the command line or by using a GUI database client browser.\n\n##### Using command-line client\n\nNavigate to the folder where your database is\n\nAnd run the command below:\n\n```\npython manage.py dbshell\n```\n\nTo access **sqlite3 command-line client** as shown below:\n\n\n<figure> <img src=\"https://i.stack.imgur.com/Clo3f.png\" alt=\"sqlite3 command-line client\"/> <figcaption> Sqlite3 command-line client</figcaption> </figure>\n\nThen, run the command below:\n\n```\n.table\n```\n\nOr run the command below:\n\n```\n.tables\n```\n\nor run\n```\n.schema\n```\n\ndepending on what you want. Instead of invoking sqlite3 directly you could do\n\nTo show all the tables in **SQLite** as shown below:\n\n<figure> <img src=\"https://i.stack.imgur.com/Jg3IJ.png\" alt=\"tables shown in command-line\"/> <figcaption>Tables shown in command-line</figcaption> </figure>\n\nThen, run the command below:\n\n```\n.schema --indent store_product\n```\n\nTo show **the schema of \"store_product\" table** as shown below:\n\n<figure><img src=\"https://i.stack.imgur.com/q98aF.png\" alt=\"the schema of store_product\"/> <figcaption>The schema of store_product</figcaption> </figure>\n\nIf you are working with a legacy database you can generate Django models for that using the\n\n```\npython manage.py inspectdb\n```\n\n##### Using GUI database client\n\nA much easier way to access the database schema would be through a GUI database client\n\nA popular GUI database browser client  is DB Browser\n\n#### DB Browser\n\nDB Browser for SQLite is a free tool (Open Source) that lets you create, edit, and manage SQLite databases easily. Whether you're a developer or a regular user, it simplifies tasks like creating, searching, and modifying databases. You don't need to know complex SQL statements because it has a user-friendly interface similar to a spreadsheet. You can download it for your operating system from [here](https://sqlitebrowser.org/dl/).\n\n<figure> <img src=\"https://techvidvan.com/tutorials/wp-content/uploads/sites/2/2021/07/Step-1-DB-Browser.png\" alt=\"DB Browser download page\" width=\"800\" height=\"360\"/> <figcaption> DB Browser Website Download page</figcaption> </figure>\n\nOther GUI database browser client, DBeaver, Navicat & SQLyog \n\n#### DBeaver\n\nDBeaver is a free, multi-platform database tool that supports various database management systems such as MySQL, PostgreSQL, SQLite, Oracle, and many others. It offers a user-friendly interface with features like SQL editor, schema navigation, data browsing, and SQL execution.\n\n#### Navicat\n\nNavicat is a powerful database management tool that supports a wide range of databases including MySQL, PostgreSQL, SQLite, SQL Server, and Oracle. It offers features like data manipulation, data modeling, database design, and data synchronization. Navicat provides a visually appealing interface with a lot of customization options.\n\n#### SQLyog \n\nSQLyog is a MySQL and MariaDB database management tool that provides a rich set of features for database administrators and developers. It offers features like schema and data synchronization, database backup, query profiling, and SSH tunneling. SQLyog has an intuitive interface with a customizable workspace.\n\n### References & Additional Resources\n\n1. Official Django documentation  [https://docs.djangoproject.com/en/5.0/ref/django-admin/#django-admin-inspectdb](https://docs.djangoproject.com/en/5.0/ref/django-admin/#django-admin-inspectdb) \n\n2. TechVidVan  [Django Database: How to Connect SQLite Database with Django Project](https://techvidvan.com/tutorials/django-database-connectivity/) \n\n3. StackOverflow question and answers: [How to view database and schema of django sqlite3 db](https://stackoverflow.com/questions/42227778/how-to-view-database-and-schema-of-django-sqlite3-db) \n\n",
    "code": "var Component=(()=>{var h=Object.create;var t=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),f=(n,e)=>{for(var i in e)t(n,i,{get:e[i],enumerable:!0})},c=(n,e,i,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of p(e))!u.call(n,s)&&s!==i&&t(n,s,{get:()=>e[s],enumerable:!(o=m(e,s))||o.enumerable});return n};var w=(n,e,i)=>(i=n!=null?h(g(n)):{},c(e||!n||!n.__esModule?t(i,\"default\",{value:n,enumerable:!0}):i,n)),y=n=>c(t({},\"__esModule\",{value:!0}),n);var l=b((k,r)=>{r.exports=_jsx_runtime});var S={};f(S,{default:()=>j,frontmatter:()=>N});var a=w(l()),N={title:\"Viewing Database and Schema in Django SQLite3 Database\",publishedAt:\"Feb 7, 2024\",description:\"In Django, `db.sqlite3` is the default SQLite database file that is created when you initiate a new Django project. SQLite is a lightweight, serverless, self-contained, and transactional SQL database engine.\",seoDescription:\"In Django, `db.sqlite3` is the default SQLite database file that is created when you initiate a new Django project. SQLite is a lightweight, serverless, self-contained, and transactional SQL database engine.\",category:\"coding\",tags:\"database\",author:{name:\"GlenH\",image:\"/assets/glens_1.png\"},image:\"https://images.unsplash.com/photo-1667372459510-55b5e2087cd0?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxfDB8MXxyYW5kb218MHx8fHx8fHx8MTY5ODI3NzAwNg&ixlib=rb-4.0.3&q=80&utm_campaign=api-credit&utm_medium=referral&utm_source=unsplash_source&w=1080\",caption:\"A group of blue boxes, PC: Growtika via Unsplash\"};function d(n){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",span:\"span\",h4:\"h4\",a:\"a\",h5:\"h5\",strong:\"strong\",h3:\"h3\",ol:\"ol\",li:\"li\"},n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.p,{children:[\"In Django, \",(0,a.jsx)(e.code,{children:\"db.sqlite3\"}),\" is the default SQLite database file that is created when you initiate a new Django project. SQLite is a lightweight, serverless, self-contained, and transactional SQL database engine.\"]}),`\n`,(0,a.jsx)(e.p,{children:\"When you start a new Django project, by default, it comes configured to use SQLite as its database backend. SQLite is suitable for development and small-scale applications, as it's lightweight and doesn't require a separate database server process.\"}),`\n`,(0,a.jsxs)(e.p,{children:[\"A default default \",(0,a.jsx)(e.code,{children:\"db.sqlite3\"}),\" databse configuration would look something like this in your Django \",(0,a.jsx)(e.code,{children:\"settings.py\"}),\" file.\"]}),`\n`,(0,a.jsx)(e.pre,{children:(0,a.jsxs)(e.code,{className:\"code-highlight\",children:[(0,a.jsx)(e.span,{className:\"code-line\",children:`DATABASES = {\n`}),(0,a.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,a.jsx)(e.span,{className:\"code-line\",children:`'default': {\n`}),(0,a.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,a.jsx)(e.span,{className:\"code-line\",children:`'ENGINE': 'django.db.backends.sqlite3',\n`}),(0,a.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,a.jsx)(e.span,{className:\"code-line\",children:`'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n`}),(0,a.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,a.jsx)(e.span,{className:\"code-line\",children:`}\n`}),(0,a.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,a.jsx)(e.span,{className:\"code-line\",children:`}\n`})]})}),`\n`,(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:\"db.sqlite3\"}),\" is an integral part of Django projects, particularly during development, and it represents the SQLite database that your Django project uses by default.\"]}),`\n`,(0,a.jsxs)(e.h4,{id:\"reasons-to-view-database-schemas\",children:[(0,a.jsx)(e.a,{className:\"anchor\",href:\"#reasons-to-view-database-schemas\",children:(0,a.jsx)(e.span,{className:\"icon icon-link\"})}),\"Reasons to view database schemas\"]}),`\n`,(0,a.jsxs)(e.p,{children:[\"Viewing the schema that Django created in the \",(0,a.jsx)(e.code,{children:\"db.sqlite3\"}),\" database can be beneficial especially when you want to understand the database structure, debug and troubleshoot, check migration status, manipulate database manually, integrate with external tools and document  your database.\"]}),`\n`,(0,a.jsxs)(e.h4,{id:\"common-steps-to-access-and-view-the-database-schema\",children:[(0,a.jsx)(e.a,{className:\"anchor\",href:\"#common-steps-to-access-and-view-the-database-schema\",children:(0,a.jsx)(e.span,{className:\"icon icon-link\"})}),\"Common steps to access and view the database schema\"]}),`\n`,(0,a.jsx)(e.p,{children:\"The common approaches  to access and view the database schema are via the command line or by using a GUI database client browser.\"}),`\n`,(0,a.jsxs)(e.h5,{id:\"using-command-line-client\",children:[(0,a.jsx)(e.a,{className:\"anchor\",href:\"#using-command-line-client\",children:(0,a.jsx)(e.span,{className:\"icon icon-link\"})}),\"Using command-line client\"]}),`\n`,(0,a.jsx)(e.p,{children:\"Navigate to the folder where your database is\"}),`\n`,(0,a.jsx)(e.p,{children:\"And run the command below:\"}),`\n`,(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:\"code-highlight\",children:(0,a.jsx)(e.span,{className:\"code-line\",children:`python manage.py dbshell\n`})})}),`\n`,(0,a.jsxs)(e.p,{children:[\"To access\\xA0\",(0,a.jsx)(e.strong,{children:\"sqlite3 command-line client\"}),\"\\xA0as shown below:\"]}),`\n`,(0,a.jsxs)(\"figure\",{children:[\" \",(0,a.jsx)(\"img\",{src:\"https://i.stack.imgur.com/Clo3f.png\",alt:\"sqlite3 command-line client\"}),\" \",(0,a.jsx)(\"figcaption\",{children:\" Sqlite3 command-line client\"}),\" \"]}),`\n`,(0,a.jsx)(e.p,{children:\"Then, run the command below:\"}),`\n`,(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:\"code-highlight\",children:(0,a.jsx)(e.span,{className:\"code-line\",children:`.table\n`})})}),`\n`,(0,a.jsx)(e.p,{children:\"Or run the command below:\"}),`\n`,(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:\"code-highlight\",children:(0,a.jsx)(e.span,{className:\"code-line\",children:`.tables\n`})})}),`\n`,(0,a.jsx)(e.p,{children:\"or run\"}),`\n`,(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:\"code-highlight\",children:(0,a.jsx)(e.span,{className:\"code-line\",children:`.schema\n`})})}),`\n`,(0,a.jsx)(e.p,{children:\"depending on what you want. Instead of invoking sqlite3 directly you could do\"}),`\n`,(0,a.jsxs)(e.p,{children:[\"To show all the tables in\\xA0\",(0,a.jsx)(e.strong,{children:\"SQLite\"}),\"\\xA0as shown below:\"]}),`\n`,(0,a.jsxs)(\"figure\",{children:[\" \",(0,a.jsx)(\"img\",{src:\"https://i.stack.imgur.com/Jg3IJ.png\",alt:\"tables shown in command-line\"}),\" \",(0,a.jsx)(\"figcaption\",{children:\"Tables shown in command-line\"}),\" \"]}),`\n`,(0,a.jsx)(e.p,{children:\"Then, run the command below:\"}),`\n`,(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:\"code-highlight\",children:(0,a.jsx)(e.span,{className:\"code-line\",children:`.schema --indent store_product\n`})})}),`\n`,(0,a.jsxs)(e.p,{children:[\"To show\\xA0\",(0,a.jsx)(e.strong,{children:'the schema of \"store_product\" table'}),\"\\xA0as shown below:\"]}),`\n`,(0,a.jsxs)(\"figure\",{children:[(0,a.jsx)(\"img\",{src:\"https://i.stack.imgur.com/q98aF.png\",alt:\"the schema of store_product\"}),\" \",(0,a.jsx)(\"figcaption\",{children:\"The schema of store_product\"}),\" \"]}),`\n`,(0,a.jsx)(e.p,{children:\"If you are working with a legacy database you can generate Django models for that using the\"}),`\n`,(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:\"code-highlight\",children:(0,a.jsx)(e.span,{className:\"code-line\",children:`python manage.py inspectdb\n`})})}),`\n`,(0,a.jsxs)(e.h5,{id:\"using-gui-database-client\",children:[(0,a.jsx)(e.a,{className:\"anchor\",href:\"#using-gui-database-client\",children:(0,a.jsx)(e.span,{className:\"icon icon-link\"})}),\"Using GUI database client\"]}),`\n`,(0,a.jsx)(e.p,{children:\"A much easier way to access the database schema would be through a GUI database client\"}),`\n`,(0,a.jsx)(e.p,{children:\"A popular GUI database browser client  is DB Browser\"}),`\n`,(0,a.jsxs)(e.h4,{id:\"db-browser\",children:[(0,a.jsx)(e.a,{className:\"anchor\",href:\"#db-browser\",children:(0,a.jsx)(e.span,{className:\"icon icon-link\"})}),\"DB Browser\"]}),`\n`,(0,a.jsxs)(e.p,{children:[\"DB Browser for SQLite is a free tool (Open Source) that lets you create, edit, and manage SQLite databases easily. Whether you're a developer or a regular user, it simplifies tasks like creating, searching, and modifying databases. You don't need to know complex SQL statements because it has a user-friendly interface similar to a spreadsheet. You can download it for your operating system from \",(0,a.jsx)(e.a,{href:\"https://sqlitebrowser.org/dl/\",target:\"_blank\",rel:\"nofollow noopener noreferrer\",children:\"here\"}),\".\"]}),`\n`,(0,a.jsxs)(\"figure\",{children:[\" \",(0,a.jsx)(\"img\",{src:\"https://techvidvan.com/tutorials/wp-content/uploads/sites/2/2021/07/Step-1-DB-Browser.png\",alt:\"DB Browser download page\",width:\"800\",height:\"360\"}),\" \",(0,a.jsx)(\"figcaption\",{children:\" DB Browser Website Download page\"}),\" \"]}),`\n`,(0,a.jsx)(e.p,{children:\"Other GUI database browser client, DBeaver, Navicat & SQLyog\"}),`\n`,(0,a.jsxs)(e.h4,{id:\"dbeaver\",children:[(0,a.jsx)(e.a,{className:\"anchor\",href:\"#dbeaver\",children:(0,a.jsx)(e.span,{className:\"icon icon-link\"})}),\"DBeaver\"]}),`\n`,(0,a.jsx)(e.p,{children:\"DBeaver is a free, multi-platform database tool that supports various database management systems such as MySQL, PostgreSQL, SQLite, Oracle, and many others. It offers a user-friendly interface with features like SQL editor, schema navigation, data browsing, and SQL execution.\"}),`\n`,(0,a.jsxs)(e.h4,{id:\"navicat\",children:[(0,a.jsx)(e.a,{className:\"anchor\",href:\"#navicat\",children:(0,a.jsx)(e.span,{className:\"icon icon-link\"})}),\"Navicat\"]}),`\n`,(0,a.jsx)(e.p,{children:\"Navicat is a powerful database management tool that supports a wide range of databases including MySQL, PostgreSQL, SQLite, SQL Server, and Oracle. It offers features like data manipulation, data modeling, database design, and data synchronization. Navicat provides a visually appealing interface with a lot of customization options.\"}),`\n`,(0,a.jsxs)(e.h4,{id:\"sqlyog\",children:[(0,a.jsx)(e.a,{className:\"anchor\",href:\"#sqlyog\",children:(0,a.jsx)(e.span,{className:\"icon icon-link\"})}),\"SQLyog\"]}),`\n`,(0,a.jsx)(e.p,{children:\"SQLyog is a MySQL and MariaDB database management tool that provides a rich set of features for database administrators and developers. It offers features like schema and data synchronization, database backup, query profiling, and SSH tunneling. SQLyog has an intuitive interface with a customizable workspace.\"}),`\n`,(0,a.jsxs)(e.h3,{id:\"references--additional-resources\",children:[(0,a.jsx)(e.a,{className:\"anchor\",href:\"#references--additional-resources\",children:(0,a.jsx)(e.span,{className:\"icon icon-link\"})}),\"References & Additional Resources\"]}),`\n`,(0,a.jsxs)(e.ol,{children:[`\n`,(0,a.jsxs)(e.li,{children:[`\n`,(0,a.jsxs)(e.p,{children:[\"Official Django documentation  \",(0,a.jsx)(e.a,{href:\"https://docs.djangoproject.com/en/5.0/ref/django-admin/#django-admin-inspectdb\",target:\"_blank\",rel:\"nofollow noopener noreferrer\",children:\"https://docs.djangoproject.com/en/5.0/ref/django-admin/#django-admin-inspectdb\"}),\"\\xA0\"]}),`\n`]}),`\n`,(0,a.jsxs)(e.li,{children:[`\n`,(0,a.jsxs)(e.p,{children:[\"TechVidVan  \",(0,a.jsx)(e.a,{href:\"https://techvidvan.com/tutorials/django-database-connectivity/\",target:\"_blank\",rel:\"nofollow noopener noreferrer\",children:\"Django Database: How to Connect SQLite Database with Django Project\"}),\"\\xA0\"]}),`\n`]}),`\n`,(0,a.jsxs)(e.li,{children:[`\n`,(0,a.jsxs)(e.p,{children:[\"StackOverflow question and answers: \",(0,a.jsx)(e.a,{href:\"https://stackoverflow.com/questions/42227778/how-to-view-database-and-schema-of-django-sqlite3-db\",target:\"_blank\",rel:\"nofollow noopener noreferrer\",children:\"How to view database and schema of django sqlite3 db\"}),\"\\xA0\"]}),`\n`]}),`\n`]})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(d,n)})):d(n)}var j=v;return y(S);})();\n;return Component;"
  },
  "_id": "articles/database-schema-in-django-sqlite-database.mdx",
  "_raw": {
    "sourceFilePath": "articles/database-schema-in-django-sqlite-database.mdx",
    "sourceFileName": "database-schema-in-django-sqlite-database.mdx",
    "sourceFileDir": "articles",
    "contentType": "mdx",
    "flattenedPath": "articles/database-schema-in-django-sqlite-database"
  },
  "type": "Article",
  "readingTime": {
    "text": "4 min read",
    "minutes": 3.205,
    "time": 192300,
    "words": 641
  },
  "wordCount": 649,
  "slug": "database-schema-in-django-sqlite-database",
  "headings": [
    {
      "level": "three",
      "text": "Reasons to view database schemas",
      "slug": "reasons-to-view-database-schemas"
    },
    {
      "level": "three",
      "text": "Common steps to access and view the database schema",
      "slug": "common-steps-to-access-and-view-the-database-schema"
    },
    {
      "level": "three",
      "text": "Using command-line client",
      "slug": "using-command-line-client"
    },
    {
      "level": "three",
      "text": "Using GUI database client",
      "slug": "using-gui-database-client"
    },
    {
      "level": "three",
      "text": "DB Browser",
      "slug": "db-browser"
    },
    {
      "level": "three",
      "text": "DBeaver",
      "slug": "dbeaver"
    },
    {
      "level": "three",
      "text": "Navicat",
      "slug": "navicat"
    },
    {
      "level": "three",
      "text": "SQLyog ",
      "slug": "sqlyog-"
    },
    {
      "level": "three",
      "text": "References & Additional Resources",
      "slug": "references--additional-resources"
    }
  ]
}